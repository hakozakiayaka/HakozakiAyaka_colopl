//=============================================================================
//
//	デバッグ用文字フォントの処理 [DebugProp.cpp]
// Author :	YUTORO ABE
//
//=============================================================================
#include "debugproc.h"
#include "manager.h"
#include "renderer.h"



//=============================================================================
//	静的メンバ変数の初期化
//=============================================================================
LPD3DXFONT CDebugProc::m_pFont = NULL;					// フォントへのポインタ

//=============================================================================
//	コンストラクタ
//=============================================================================
CDebugProc::CDebugProc()
{

}

//=============================================================================
//	デストラクタ
//=============================================================================
CDebugProc::~CDebugProc()
{

}

//=============================================================================
//	初期化処理
//=============================================================================
void CDebugProc::Init(void)
{
	CRenderer *pRenderer = CManager::GetRenderer();
	LPDIRECT3DDEVICE9	pDevice = pRenderer->GetDevice();

	// デバッグ情報表示用フォントの生成
	D3DXCreateFont(pDevice, 18, 0, 0, 0, FALSE, SHIFTJIS_CHARSET,
		OUT_DEFAULT_PRECIS, DEFAULT_QUALITY, DEFAULT_PITCH, "Terminal", &m_pFont);

}

//=============================================================================
//	終了処理
//=============================================================================
void  CDebugProc::Uninit(void)
{
	// デバッグ情報表示用フォントの破棄
	if (m_pFont != NULL)
	{
		m_pFont->Release();
		m_pFont = NULL;
	}
}

//=============================================================================
//	描画の処理
//=============================================================================
void  CDebugProc::Draw(void)
{

}

//====================================================================================================================
//	左の文字列の
//====================================================================================================================
//=============================================================================
//	静的メンバ変数の初期化
//=============================================================================
char CDebugProcLEFT::m_aStr[1024] = {};						//	読み込む文字列

//=============================================================================
//	コンストラク
//=============================================================================
CDebugProcLEFT::CDebugProcLEFT(){}

//=============================================================================
//	デストラクタ
//=============================================================================
CDebugProcLEFT::~CDebugProcLEFT(){}

//=============================================================================
//	初期化処理
//=============================================================================
void CDebugProcLEFT::Init(void)
{
	CDebugProc::Init();
}

//=============================================================================
//	終了処理
//=============================================================================
void CDebugProcLEFT::Uninit(void)
{
	CDebugProc::Uninit();
}

//=============================================================================
//	描画の処理
//=============================================================================
void CDebugProcLEFT::Draw(void)
{
#ifdef _DEBUG
	RECT rect = { 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT };
	m_pFont->DrawText(NULL, m_aStr, -1, &rect, DT_LEFT, D3DCOLOR_ARGB(0xff, 0xff, 0xff, 0xff));

#endif

	//	バッファのクリア
	ZeroMemory(&m_aStr, sizeof(m_aStr));


}
//=============================================================================
//	文字列の生成
//=============================================================================
void  CDebugProcLEFT::Print(char *ftm, ...)
{

	va_list list;
	char string[1024];

	//	ポインタの初期化
	va_start(list, ftm);
	vsprintf(string, ftm, list);
	strcat(m_aStr, string);




	va_end(list);
	//	キーボードの取得
	CInputKeyboard *pInputKeyboad = CManager::GetInputKeyboard();



}
//====================================================================================================================
//	右の文字列の
//====================================================================================================================
//=============================================================================
//	静的メンバ変数の初期化
//=============================================================================
char CDebugProcRIGHT::m_aStr[1024] = {};						//	読み込む文字列

//=============================================================================
//	コンストラク
//=============================================================================
CDebugProcRIGHT::CDebugProcRIGHT(){}

//=============================================================================
//	デストラクタ
//=============================================================================
CDebugProcRIGHT::~CDebugProcRIGHT(){}

//=============================================================================
//	初期化処理
//=============================================================================
void CDebugProcRIGHT::Init(void)
{
	CDebugProc::Init();

}

//=============================================================================
//	終了処理
//=============================================================================
void CDebugProcRIGHT::Uninit(void)
{
	CDebugProc::Uninit();
}

//=============================================================================
//	描画の処理
//=============================================================================
void CDebugProcRIGHT::Draw(void)
{
#ifdef _DEBUG
	RECT rect = { 500, 0, SCREEN_WIDTH, SCREEN_HEIGHT };

	m_pFont->DrawText(NULL, m_aStr, -1, &rect, DT_RIGHT, D3DCOLOR_ARGB(0xff, 0xff, 0xff, 0xff));
#endif

	//	バッファのクリア
	ZeroMemory(&m_aStr, sizeof(m_aStr));


}
//=============================================================================
//	文字列の生成
//=============================================================================
void  CDebugProcRIGHT::Print(char *ftm, ...)
{

	va_list list;
	char string[1024];

	//	ポインタの初期化
	va_start(list, ftm);
	vsprintf(string, ftm, list);
	strcat(m_aStr, string);
	va_end(list);
}